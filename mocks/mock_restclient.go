// Code generated by MockGen. DO NOT EDIT.
// Source: request/restclient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	request "github.com/codagelabs/restclient/request"
	gomock "github.com/golang/mock/gomock"
)

// MockHTTPRequest is a mock of HTTPRequest interface.
type MockHTTPRequest struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPRequestMockRecorder
}

// MockHTTPRequestMockRecorder is the mock recorder for MockHTTPRequest.
type MockHTTPRequestMockRecorder struct {
	mock *MockHTTPRequest
}

// NewMockHTTPRequest creates a new mock instance.
func NewMockHTTPRequest(ctrl *gomock.Controller) *MockHTTPRequest {
	mock := &MockHTTPRequest{ctrl: ctrl}
	mock.recorder = &MockHTTPRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPRequest) EXPECT() *MockHTTPRequestMockRecorder {
	return m.recorder
}

// AddCookies mocks base method.
func (m *MockHTTPRequest) AddCookies(cookies *http.Cookie) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCookies", cookies)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// AddCookies indicates an expected call of AddCookies.
func (mr *MockHTTPRequestMockRecorder) AddCookies(cookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCookies", reflect.TypeOf((*MockHTTPRequest)(nil).AddCookies), cookies)
}

// AddHeaders mocks base method.
func (m *MockHTTPRequest) AddHeaders(key, value string) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHeaders", key, value)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// AddHeaders indicates an expected call of AddHeaders.
func (mr *MockHTTPRequestMockRecorder) AddHeaders(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHeaders", reflect.TypeOf((*MockHTTPRequest)(nil).AddHeaders), key, value)
}

// DELETE mocks base method.
func (m *MockHTTPRequest) DELETE(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DELETE", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DELETE indicates an expected call of DELETE.
func (mr *MockHTTPRequestMockRecorder) DELETE(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockHTTPRequest)(nil).DELETE), url)
}

// Error mocks base method.
func (m *MockHTTPRequest) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockHTTPRequestMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockHTTPRequest)(nil).Error))
}

// GET mocks base method.
func (m *MockHTTPRequest) GET(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// GET indicates an expected call of GET.
func (mr *MockHTTPRequestMockRecorder) GET(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockHTTPRequest)(nil).GET), url)
}

// GetResponseAs mocks base method.
func (m *MockHTTPRequest) GetResponseAs(responseModel interface{}) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseAs", responseModel)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// GetResponseAs indicates an expected call of GetResponseAs.
func (mr *MockHTTPRequestMockRecorder) GetResponseAs(responseModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseAs", reflect.TypeOf((*MockHTTPRequest)(nil).GetResponseAs), responseModel)
}

// GetResponseCookiesAs mocks base method.
func (m *MockHTTPRequest) GetResponseCookiesAs(cookies *[]*http.Cookie) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseCookiesAs", cookies)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// GetResponseCookiesAs indicates an expected call of GetResponseCookiesAs.
func (mr *MockHTTPRequestMockRecorder) GetResponseCookiesAs(cookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseCookiesAs", reflect.TypeOf((*MockHTTPRequest)(nil).GetResponseCookiesAs), cookies)
}

// GetResponseHeadersAs mocks base method.
func (m *MockHTTPRequest) GetResponseHeadersAs(respHeaders *map[string][]string) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseHeadersAs", respHeaders)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// GetResponseHeadersAs indicates an expected call of GetResponseHeadersAs.
func (mr *MockHTTPRequestMockRecorder) GetResponseHeadersAs(respHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseHeadersAs", reflect.TypeOf((*MockHTTPRequest)(nil).GetResponseHeadersAs), respHeaders)
}

// GetResponseStatusCodeAs mocks base method.
func (m *MockHTTPRequest) GetResponseStatusCodeAs(httpStatusCode *int) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseStatusCodeAs", httpStatusCode)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// GetResponseStatusCodeAs indicates an expected call of GetResponseStatusCodeAs.
func (mr *MockHTTPRequestMockRecorder) GetResponseStatusCodeAs(httpStatusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseStatusCodeAs", reflect.TypeOf((*MockHTTPRequest)(nil).GetResponseStatusCodeAs), httpStatusCode)
}

// PATCH mocks base method.
func (m *MockHTTPRequest) PATCH(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PATCH", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// PATCH indicates an expected call of PATCH.
func (mr *MockHTTPRequestMockRecorder) PATCH(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockHTTPRequest)(nil).PATCH), url)
}

// POST mocks base method.
func (m *MockHTTPRequest) POST(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "POST", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// POST indicates an expected call of POST.
func (mr *MockHTTPRequestMockRecorder) POST(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockHTTPRequest)(nil).POST), url)
}

// PUT mocks base method.
func (m *MockHTTPRequest) PUT(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PUT", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// PUT indicates an expected call of PUT.
func (mr *MockHTTPRequestMockRecorder) PUT(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockHTTPRequest)(nil).PUT), url)
}

// WithBasicAuth mocks base method.
func (m *MockHTTPRequest) WithBasicAuth(username, password string) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithBasicAuth", username, password)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// WithBasicAuth indicates an expected call of WithBasicAuth.
func (mr *MockHTTPRequestMockRecorder) WithBasicAuth(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithBasicAuth", reflect.TypeOf((*MockHTTPRequest)(nil).WithBasicAuth), username, password)
}

// WithContext mocks base method.
func (m *MockHTTPRequest) WithContext(context context.Context) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", context)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockHTTPRequestMockRecorder) WithContext(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockHTTPRequest)(nil).WithContext), context)
}

// WithFromURLEncoded mocks base method.
func (m *MockHTTPRequest) WithFromURLEncoded(formData map[string]interface{}) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFromURLEncoded", formData)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// WithFromURLEncoded indicates an expected call of WithFromURLEncoded.
func (mr *MockHTTPRequestMockRecorder) WithFromURLEncoded(formData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFromURLEncoded", reflect.TypeOf((*MockHTTPRequest)(nil).WithFromURLEncoded), formData)
}

// WithJWTAuth mocks base method.
func (m *MockHTTPRequest) WithJWTAuth(token string) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithJWTAuth", token)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// WithJWTAuth indicates an expected call of WithJWTAuth.
func (mr *MockHTTPRequestMockRecorder) WithJWTAuth(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithJWTAuth", reflect.TypeOf((*MockHTTPRequest)(nil).WithJWTAuth), token)
}

// WithJson mocks base method.
func (m *MockHTTPRequest) WithJson(requestModel interface{}) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithJson", requestModel)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// WithJson indicates an expected call of WithJson.
func (mr *MockHTTPRequestMockRecorder) WithJson(requestModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithJson", reflect.TypeOf((*MockHTTPRequest)(nil).WithJson), requestModel)
}

// WithOauth mocks base method.
func (m *MockHTTPRequest) WithOauth(token string) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOauth", token)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// WithOauth indicates an expected call of WithOauth.
func (mr *MockHTTPRequestMockRecorder) WithOauth(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOauth", reflect.TypeOf((*MockHTTPRequest)(nil).WithOauth), token)
}

// WithQueryParameters mocks base method.
func (m *MockHTTPRequest) WithQueryParameters(queryParam map[string]string) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithQueryParameters", queryParam)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// WithQueryParameters indicates an expected call of WithQueryParameters.
func (mr *MockHTTPRequestMockRecorder) WithQueryParameters(queryParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithQueryParameters", reflect.TypeOf((*MockHTTPRequest)(nil).WithQueryParameters), queryParam)
}

// WithXml mocks base method.
func (m *MockHTTPRequest) WithXml(requestModel interface{}) request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithXml", requestModel)
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// WithXml indicates an expected call of WithXml.
func (mr *MockHTTPRequestMockRecorder) WithXml(requestModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithXml", reflect.TypeOf((*MockHTTPRequest)(nil).WithXml), requestModel)
}

// MockRestClient is a mock of RestClient interface.
type MockRestClient struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientMockRecorder
}

// MockRestClientMockRecorder is the mock recorder for MockRestClient.
type MockRestClientMockRecorder struct {
	mock *MockRestClient
}

// NewMockRestClient creates a new mock instance.
func NewMockRestClient(ctrl *gomock.Controller) *MockRestClient {
	mock := &MockRestClient{ctrl: ctrl}
	mock.recorder = &MockRestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestClient) EXPECT() *MockRestClientMockRecorder {
	return m.recorder
}

// NewRequest mocks base method.
func (m *MockRestClient) NewRequest() request.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest")
	ret0, _ := ret[0].(request.HTTPRequest)
	return ret0
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockRestClientMockRecorder) NewRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockRestClient)(nil).NewRequest))
}
